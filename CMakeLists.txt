CMAKE_MINIMUM_REQUIRED( VERSION 2.8 )

INCLUDE( "${CMAKE_SOURCE_DIR}/PROJECTINFO.cmake" )

SET( BUILDTOOLS_DIR "buildtools/" )

IF( NOT PREFIX )
  SET( PREFIX "/usr" )
ENDIF( NOT PREFIX )

IF( PLUGINNAME )
  SET( BUILDTOOLS_DIR "${PREFIX}/share/lib${BASELIB}/${BUILDTOOLS_DIR}" )
ELSE( PLUGINNAME )
  SET( BUILDTOOLS_DIR "${CMAKE_SOURCE_DIR}/${BUILDTOOLS_DIR}" )
ENDIF( PLUGINNAME )

SET( CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/Modules" "${BUILDTOOLS_DIR}" "${CMAKE_MODULE_PATH}" )

INCLUDE( LibyuiCommon )

#if you need to get a git versioned package you can use cmake -DGIT_VERSION=on
if (GIT_VERSION)
  FIND_PACKAGE(Git)
  if(GIT_FOUND)
    exec_program(
                 "${GIT_EXECUTABLE}"
                 ${CMAKE_CURRENT_SOURCE_DIR}
                 ARGS "describe"
	         OUTPUT_VARIABLE GIT_VERSION )

    string( REGEX MATCH "-g[0-9|a-f]+$" VERSION_SHA1 ${GIT_VERSION} )
    string( REGEX REPLACE "[g]" "" VERSION_SHA1 ${VERSION_SHA1} )
    set (GIT_SHA1_VERSION "${VERSION_SHA1}")
  else()
    message (STATUS "GIT_VERSION option needs git installed")
    set (GIT_SHA1_VERSION "")
  endif()
else()
  set (GIT_SHA1_VERSION "")
endif()

INCLUDE( "${CMAKE_CURRENT_SOURCE_DIR}/VERSION.cmake" )

INITIALIZE()

PROJECT( "${PROJECTNAME}" )
ADD_DEFINITIONS(-DVERSION="${VERSION}")

INCLUDE( "${CMAKE_CURRENT_SOURCE_DIR}/SOURCECONF.cmake" )

SET_OPTIONS()

IF( NOT DOCS_ONLY )
  FIND_LIB_DEPENDENCIES()
  FIND_LINKER_LIBS()
ENDIF( NOT DOCS_ONLY )

CHECK_PREFIX()

IF( DOCS_ONLY )
  FIND_PACKAGE( Libyui REQUIRED )
  SET_SONAME()
ENDIF( DOCS_ONLY )

SET_ENVIRONMENT()
SET_BUILD_FLAGS()
SET_AUTODOCS()

IF( NOT DOCS_ONLY )
  SET_SUBDIRS()
  GEN_EXPORTS()
  GEN_FILES()
  PREP_SPEC_FILES()
  SET_INSTALL_TARGET()
  PREP_OBS_TARBALL()
ENDIF( NOT DOCS_ONLY )

SUMMARY()
